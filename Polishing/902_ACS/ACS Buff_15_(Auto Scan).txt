INT m_nEMS   !EMS
INT m_nLeak  !Leak
INT IO_NODE_NO, EC_ADDR, PRODUCT_ID, NODE_Q
INT PLC_GATE_NODE, II

AUTOEXEC:
ECUNMAP
WAIT 500
!---- Ethercat Slave Node Initialize
PLC_GATE_NODE = 34
IO_NODE_NO = 2


!SICK SAFETY PLC UNIT
PRODUCT_ID = ECGETPID(PLC_GATE_NODE)
DISP "EtherCAT PLC PRODUCT_ID : %d" , PRODUCT_ID

EC_ADDR = ECGETOFFSET("Diag", PLC_GATE_NODE)
DISP "EtherCAT PLC PRODUCT_ID : %d, ADDR : %d", PRODUCT_ID, EC_ADDR
ECIN(EC_ADDR, Diag(0))
EC_ADDR = ECGETOFFSET("In_Dataset1", PLC_GATE_NODE)
DISP "EtherCAT PLC PRODUCT_ID : %d, ADDR : %d", PRODUCT_ID, EC_ADDR
ECIN(EC_ADDR, SICK_DATA(0)) 
EC_ADDR = ECGETOFFSET("In_Dataset2", PLC_GATE_NODE)
DISP "EtherCAT PLC PRODUCT_ID : %d, ADDR : %d", PRODUCT_ID, EC_ADDR
ECIN(EC_ADDR, SICK_DATA(1))
EC_ADDR = ECGETOFFSET("Out_Dataset1", PLC_GATE_NODE)
DISP "EtherCAT PLC PRODUCT_ID : %d, ADDR : %d", PRODUCT_ID, EC_ADDR
ECOUT(EC_ADDR, EC_PLCOUT(0))

WAIT 100

!--Digital Input Beckhoff Digital Input Card EL1889
!--Node Number 2 ~ 13
II = 0
LOOP 12
	PRODUCT_ID = ECGETPID(IO_NODE_NO)
	EC_ADDR = ECGETOFFSET("Input", IO_NODE_NO)
	ECIN(EC_ADDR,EC_IN(II))
	DISP " EtherCAT_Input_ Mapping EC_IN(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+1
	ECIN(EC_ADDR,EC_IN(II))
	DISP " EtherCAT_Input_ Mapping EC_IN(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1
	IO_NODE_NO = IO_NODE_NO+1
END
!--Digital Output Beckhoff Digital Output Card EL2889
!--Node Number 15 ~ 20
II = 0
IO_NODE_NO = 15
LOOP 6
	PRODUCT_ID = ECGETPID(IO_NODE_NO)
	EC_ADDR = ECGETOFFSET("Output", IO_NODE_NO)
	ECOUT(EC_ADDR,EC_OUT(II))
	DISP " EtherCAT_Input_ Mapping EC_OUT(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+1
	ECOUT(EC_ADDR,EC_OUT(II))
	DISP " EtherCAT_Input_ Mapping EC_OUT(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1
	IO_NODE_NO = IO_NODE_NO+1
END

!Beckhoff Analog Input Card EL3164, 12Bit
!--Node Number 21 ~ 23
II = 0
IO_NODE_NO = 21
LOOP 3
	PRODUCT_ID = ECGETPID(IO_NODE_NO)
	EC_ADDR = ECGETOFFSET("Value", IO_NODE_NO)
	ECIN(EC_ADDR,EC_AIN(II))
	DISP " EtherCAT_Input_ Mapping EC_AIN(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+4
	ECIN(EC_ADDR,EC_AIN(II))
	DISP " EtherCAT_Input_ Mapping EC_AIN(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+4
	ECIN(EC_ADDR,EC_AIN(II))
	DISP " EtherCAT_Input_ Mapping EC_AIN(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+4
	ECIN(EC_ADDR,EC_AIN(II))
	DISP " EtherCAT_Input_ Mapping EC_AIN(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+4
	IO_NODE_NO = IO_NODE_NO+1
END
!Beckhoff Analog Output Card EL4104, 12Bit
!--Node Number 24
II = 0
IO_NODE_NO = 24
LOOP 1
	PRODUCT_ID = ECGETPID(IO_NODE_NO)
	EC_ADDR = ECGETOFFSET("Analog output", IO_NODE_NO)
	ECOUT(EC_ADDR,EC_AOUT(II))
	DISP " EtherCAT_OUT_ Mapping EC_AOUT(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+2
	ECOUT(EC_ADDR,EC_AOUT(II))
	DISP " EtherCAT_OUT_ Mapping EC_AOUT(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+2
	ECOUT(EC_ADDR,EC_AOUT(II))
	DISP " EtherCAT_OUT_ Mapping EC_AOUT(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+2
	ECOUT(EC_ADDR,EC_AOUT(II))
	DISP " EtherCAT_OUT_ Mapping EC_AOUT(%d) = ADDR : %d" , II, EC_ADDR
	II = II + 1 
	EC_ADDR = EC_ADDR+2
	IO_NODE_NO = IO_NODE_NO+1
END

!SMC JXCE1 Drive PDO Data, Node 30
ECIN(208, SMC_INPUT(0))
ECIN(210, SMC_INFO_FLAG(0))
ECIN(212, SMC_CURRENT_POS(0))
ECIN(216, SMC_CURRENT_VEL(0))
ECIN(218, SMC_READ_PUSH_FORCE(0))
ECIN(220, SMC_READ_TARGET_POS(0))
ECIN(224, SMC_ALRAM(0))

ECOUT(208, SMC_OUTPUT(0))			!Object 7010
ECOUT(210, SMC_CONTROL_FLAG(0))		!		7011
ECOUT(212, SMC_START_FLAG(0))		!		7012
ECOUT(213, SMC_MOVEMODE(0))			!		7020
ECOUT(214, SMC_TARGET_VEL(0))		!		7021
ECOUT(216, SMC_TARGET_POS(0))		!		7022
ECOUT(220, SMC_ACC_VEL(0))			!		7023
ECOUT(222, SMC_DEC_VEL(0))			!		7024
ECOUT(224, SMC_PUSH_FORCE(0))		!		7025
ECOUT(226, SMC_TRIGGER_LV(0))		!		7026
ECOUT(228, SMC_PUSH_SPEED(0))		!		7027
ECOUT(230, SMC_MOVE_FORCE(0))		!		7028
ECOUT(240, SMC_IN_POSISIONT(0))		!		702B

!SMC JXCE1 Drive PDO Data, Node 31
ECIN(244, SMC_INPUT(1))
ECIN(246, SMC_INFO_FLAG(1))
ECIN(248, SMC_CURRENT_POS(1))
ECIN(252, SMC_CURRENT_VEL(1))
ECIN(254, SMC_READ_PUSH_FORCE(1))
ECIN(256, SMC_READ_TARGET_POS(1))
ECIN(260, SMC_ALRAM(1))

ECOUT(244, SMC_OUTPUT(1))
ECOUT(246, SMC_CONTROL_FLAG(1))
ECOUT(248, SMC_START_FLAG(1))
ECOUT(250, SMC_TARGET_VEL(1))
ECOUT(252, SMC_TARGET_POS(1))
ECOUT(256, SMC_ACC_VEL(1))			!		7023
ECOUT(258, SMC_DEC_VEL(1))			!		7024
ECOUT(260, SMC_PUSH_FORCE(1))		!		7025
ECOUT(262, SMC_TRIGGER_LV(1))		!		7026
ECOUT(264, SMC_PUSH_SPEED(1))		!		7027
ECOUT(266, SMC_MOVE_FORCE(1))		!		7028
ECOUT(276, SMC_IN_POSISIONT(1))		!		702B

!SMC JXCE1 Drive PDO Data, Node 32
ECIN(280, SMC_INPUT(2))
ECIN(282, SMC_INFO_FLAG(2))
ECIN(284, SMC_CURRENT_POS(2))
ECIN(288, SMC_CURRENT_VEL(2))
ECIN(290, SMC_READ_PUSH_FORCE(2))
ECIN(292, SMC_READ_TARGET_POS(2))
ECIN(296, SMC_ALRAM(2))

ECOUT(280, SMC_OUTPUT(2))
ECOUT(282, SMC_CONTROL_FLAG(2))
ECOUT(284, SMC_START_FLAG(2))
ECOUT(286, SMC_TARGET_VEL(2))
ECOUT(288, SMC_TARGET_POS(2))
ECOUT(292, SMC_ACC_VEL(2))			!		7023
ECOUT(294, SMC_DEC_VEL(2))			!		7024
ECOUT(296, SMC_PUSH_FORCE(2))		!		7025
ECOUT(298, SMC_TRIGGER_LV(2))		!		7026
ECOUT(300, SMC_PUSH_SPEED(2))		!		7027
ECOUT(302, SMC_MOVE_FORCE(2))		!		7028
ECOUT(312, SMC_IN_POSISIONT(2))		!		702B
WAIT 100

!--SGD7S Safety IO Mapping
!--Node Number 25 ~ 29
IF ^IN(2).0; SAFINI(3).#LL = 0; ELSEIF IN(2).0; SAFINI(3).#LL = 1; END;
IF ^IN(2).1; SAFINI(3).#RL = 0; ELSEIF IN(2).1; SAFINI(3).#RL = 1; END;
IF ^IN(3).0; SAFINI(4).#LL = 0; ELSEIF IN(3).0; SAFINI(4).#LL = 1; END;
IF ^IN(3).1; SAFINI(4).#RL = 0; ELSEIF IN(3).1; SAFINI(4).#RL = 1; END;
IF ^IN(4).0; SAFINI(5).#LL = 0; ELSEIF IN(4).0; SAFINI(5).#LL = 1; END;
IF ^IN(4).1; SAFINI(5).#RL = 0; ELSEIF IN(4).1; SAFINI(5).#RL = 1; END;
IF ^IN(5).0; SAFINI(6).#LL = 0; ELSEIF IN(5).0; SAFINI(6).#LL = 1; END;
IF ^IN(5).1; SAFINI(6).#RL = 0; ELSEIF IN(5).1; SAFINI(6).#RL = 1; END;
IF ^IN(6).0; SAFINI(7).#LL = 0; ELSEIF IN(6).0; SAFINI(7).#LL = 1; END;
IF ^IN(6).1; SAFINI(7).#RL = 0; ELSEIF IN(6).1; SAFINI(7).#RL = 1; END;
	   
WHILE 1
	!A = ((getsp(0,getspa(0,"axes[0].command"))))*100; wait 10;
	!Actual_Current = 10 * A;
	BLOCK
		!DATA_EQ_TO_SMC(EQ --> SMC)			
		SMC_START_FLAG(0).0	  	= DATA_EQ_TO_SMC(0)				!GO
		SMC_OUTPUT(0).11		= DATA_EQ_TO_SMC(1)	  			!Fault Reset
		SMC_OUTPUT(0).9			= DATA_EQ_TO_SMC(2)	  			!Servo On
		SMC_OUTPUT(0).13		= DATA_EQ_TO_SMC(3)	  			!JOG -
		SMC_OUTPUT(0).14	  	= DATA_EQ_TO_SMC(4)	  			!JOG +
		SMC_OUTPUT(0).15		= DATA_EQ_TO_SMC(5)	  			!1mm Step Move
		SMC_OUTPUT(0).12		= DATA_EQ_TO_SMC(6)	  			!Home
		SMC_OUTPUT(0).0			= DATA_EQ_TO_SMC(7)	  			!Default Parameter Set
		SMC_TARGET_VEL(0)		= DATA_EQ_TO_SMC(8)	  			!TARGET VELOCITY
		SMC_TARGET_POS(0) 		= DATA_EQ_TO_SMC(9)! * 100		!TARGET POSITION
		SMC_OUTPUT(0).8			= DATA_EQ_TO_SMC(10)			!HOLD
		SMC_CONTROL_FLAG(0).5	= DATA_EQ_TO_SMC(11)			!ACC Default Set on
		SMC_CONTROL_FLAG(0).6	= DATA_EQ_TO_SMC(12)			!DEC Default Set on
		SMC_CONTROL_FLAG(0).7	= DATA_EQ_TO_SMC(13)			!Acc Set on
		SMC_CONTROL_FLAG(0).8	= DATA_EQ_TO_SMC(14)			!Dec Set on
		SMC_MOVEMODE(0).0		= DATA_EQ_TO_SMC(15)			!MOVEMODE
		SMC_MOVEMODE(0).1		= DATA_EQ_TO_SMC(16)			!MOVEMODE
		SMC_ACC_VEL(0)			= DATA_EQ_TO_SMC(17)			!ACC_VEL
		SMC_DEC_VEL(0)			= DATA_EQ_TO_SMC(18)			!DEC_VEL
		SMC_PUSH_FORCE(0)		= DATA_EQ_TO_SMC(19)			!PUSH_FORCE
		SMC_TRIGGER_LV(0)		= DATA_EQ_TO_SMC(20)			!TRIGGER_LV
		SMC_PUSH_SPEED(0)		= DATA_EQ_TO_SMC(21)			!PUSH_SPEED
		SMC_MOVE_FORCE(0)		= DATA_EQ_TO_SMC(22)			!MOVE_FORCE
		SMC_IN_POSISIONT(0)		= DATA_EQ_TO_SMC(23)			!TARGRAD
		
		SMC_START_FLAG(2).0	  	= DATA_EQ_TO_SMC(30)			!GO
		SMC_OUTPUT(2).11		= DATA_EQ_TO_SMC(31)	  		!Fault Reset
		SMC_OUTPUT(2).9			= DATA_EQ_TO_SMC(32)	  		!Servo On
		SMC_OUTPUT(2).13		= DATA_EQ_TO_SMC(33)	  		!JOG -
		SMC_OUTPUT(2).14	  	= DATA_EQ_TO_SMC(34)	  		!JOG +
		SMC_OUTPUT(2).15		= DATA_EQ_TO_SMC(35)	  		!1mm Step Move
		SMC_OUTPUT(2).12		= DATA_EQ_TO_SMC(36)	  		!Home
		SMC_OUTPUT(2).0			= DATA_EQ_TO_SMC(37)	  		!Default Parameter Set
		SMC_TARGET_VEL(2)		= DATA_EQ_TO_SMC(38)	  		!TARGET VELOCITY
		SMC_TARGET_POS(2) 		= DATA_EQ_TO_SMC(39)! * 100		!TARGET POSITION
		SMC_OUTPUT(2).8			= DATA_EQ_TO_SMC(40)			!HOLD
		SMC_CONTROL_FLAG(2).5	= DATA_EQ_TO_SMC(41)			!ACC Default Set on
		SMC_CONTROL_FLAG(2).6	= DATA_EQ_TO_SMC(42)			!DEC Default Set on
		SMC_CONTROL_FLAG(2).7	= DATA_EQ_TO_SMC(43)			!Acc Set on
		SMC_CONTROL_FLAG(2).8	= DATA_EQ_TO_SMC(44)			!Dec Set on
		SMC_MOVEMODE(2).0		= DATA_EQ_TO_SMC(45)			!MOVEMODE
		SMC_MOVEMODE(2).1		= DATA_EQ_TO_SMC(46)			!MOVEMODE
		SMC_ACC_VEL(2)			= DATA_EQ_TO_SMC(47)			!ACC_VEL
		SMC_DEC_VEL(2)			= DATA_EQ_TO_SMC(48)			!DEC_VEL
		SMC_PUSH_FORCE(2)		= DATA_EQ_TO_SMC(49)			!PUSH_FORCE
		SMC_TRIGGER_LV(2)		= DATA_EQ_TO_SMC(50)			!TRIGGER_LV
		SMC_PUSH_SPEED(2)		= DATA_EQ_TO_SMC(51)			!PUSH_SPEED
		SMC_MOVE_FORCE(2)		= DATA_EQ_TO_SMC(52)			!MOVE_FORCE
		SMC_IN_POSISIONT(2)		= DATA_EQ_TO_SMC(53)			!TARGRAD
		
		SMC_START_FLAG(1).0	  	= DATA_EQ_TO_SMC(60)			!GO
		SMC_OUTPUT(1).11		= DATA_EQ_TO_SMC(61)	  		!Fault Reset
		SMC_OUTPUT(1).9			= DATA_EQ_TO_SMC(62)	  		!Servo On
		SMC_OUTPUT(1).13		= DATA_EQ_TO_SMC(63)	  		!JOG -
		SMC_OUTPUT(1).14	  	= DATA_EQ_TO_SMC(64)	  		!JOG +
		SMC_OUTPUT(1).15		= DATA_EQ_TO_SMC(65)	  		!1mm Step Move
		SMC_OUTPUT(1).12		= DATA_EQ_TO_SMC(66)	  		!Home
		SMC_OUTPUT(1).0			= DATA_EQ_TO_SMC(67)	  		!Default Parameter Set
		SMC_TARGET_VEL(1)		= DATA_EQ_TO_SMC(68)	  		!TARGET VELOCITY
		SMC_TARGET_POS(1) 		= DATA_EQ_TO_SMC(69)! * 100		!TARGET POSITION
		SMC_OUTPUT(1).8			= DATA_EQ_TO_SMC(70)			!HOLD
		SMC_CONTROL_FLAG(1).5	= DATA_EQ_TO_SMC(71)			!ACC Default Set on
		SMC_CONTROL_FLAG(1).6	= DATA_EQ_TO_SMC(72)			!DEC Default Set on
		SMC_CONTROL_FLAG(1).7	= DATA_EQ_TO_SMC(73)			!Acc Set on
		SMC_CONTROL_FLAG(1).8	= DATA_EQ_TO_SMC(74)			!Dec Set on
		SMC_MOVEMODE(1).0		= DATA_EQ_TO_SMC(75)			!MOVEMODE
		SMC_MOVEMODE(1).1		= DATA_EQ_TO_SMC(76)			!MOVEMODE
		SMC_ACC_VEL(1)			= DATA_EQ_TO_SMC(77)			!ACC_VEL
		SMC_DEC_VEL(1)			= DATA_EQ_TO_SMC(78)			!DEC_VEL
		SMC_PUSH_FORCE(1)		= DATA_EQ_TO_SMC(79)			!PUSH_FORCE
		SMC_TRIGGER_LV(1)		= DATA_EQ_TO_SMC(80)			!TRIGGER_LV
		SMC_PUSH_SPEED(1)		= DATA_EQ_TO_SMC(81)			!PUSH_SPEED
		SMC_MOVE_FORCE(1)		= DATA_EQ_TO_SMC(82)			!MOVE_FORCE
		SMC_IN_POSISIONT(1)		= DATA_EQ_TO_SMC(83)			!TARGRAD
		
		!DATA_SMC_TO_EQ(EQ --> ACS)			
		DATA_SMC_TO_EQ(0) = SMC_CURRENT_POS(0)
		DATA_SMC_TO_EQ(1) = SMC_CURRENT_VEL(0)
		DATA_SMC_TO_EQ(2) = SIGN(SMC_ALRAM(0))			!Fault State, SIGN(SMC_ALRAM(0))
		DATA_SMC_TO_EQ(3) = SMC_ALRAM(0)		!Alram Code
		DATA_SMC_TO_EQ(4) =	SMC_INPUT(0).10			!Home Flag
		DATA_SMC_TO_EQ(5) = SMC_INPUT(0).11			!Inposition Signal
		DATA_SMC_TO_EQ(6) = SMC_INPUT(0).8			!Busy Signal
		DATA_SMC_TO_EQ(7) = SMC_INPUT(0).9			!Servo On Signal
		DATA_SMC_TO_EQ(8) = SMC_INPUT(0).12 		!AREA
		DATA_SMC_TO_EQ(9) = SMC_INPUT(0).14			!ESTOP
		DATA_SMC_TO_EQ(10) = SMC_READ_PUSH_FORCE(0)	!PUSH FORCE
		DATA_SMC_TO_EQ(11) = SMC_READ_TARGET_POS(0)	!READING TARGET POSITION
		DATA_SMC_TO_EQ(12) = SMC_INFO_FLAG(0).4		!READY
		
		DATA_SMC_TO_EQ(60) = SMC_CURRENT_POS(1)
		DATA_SMC_TO_EQ(61) = SMC_CURRENT_VEL(1)
		DATA_SMC_TO_EQ(62) = SIGN(SMC_ALRAM(1))		!Fault State
		DATA_SMC_TO_EQ(63) = SMC_ALRAM(1)		!Alram Code
		DATA_SMC_TO_EQ(64) = SMC_INPUT(1).10		!Home Flag
		DATA_SMC_TO_EQ(65) = SMC_INPUT(1).11		!Inposition Signal
		DATA_SMC_TO_EQ(66) = SMC_INPUT(1).8			!Busy Signal
		DATA_SMC_TO_EQ(67) = SMC_INPUT(1).9			!Servo On Signal
		DATA_SMC_TO_EQ(68) = SMC_INPUT(1).12 		!AREA
		DATA_SMC_TO_EQ(69) = SMC_INPUT(1).14		!ESTOP
		DATA_SMC_TO_EQ(70) = SMC_READ_PUSH_FORCE(1)	!PUSH FORCE
		DATA_SMC_TO_EQ(71) = SMC_READ_TARGET_POS(1)	!READING TARGET POSITION
		DATA_SMC_TO_EQ(72) = SMC_INFO_FLAG(1).4		!READY

		DATA_SMC_TO_EQ(30) = SMC_CURRENT_POS(2)
		DATA_SMC_TO_EQ(31) = SMC_CURRENT_VEL(2)
		DATA_SMC_TO_EQ(32) = SIGN(SMC_ALRAM(2))		!Fault State
		DATA_SMC_TO_EQ(33) = SMC_ALRAM(2)		!Alram Code
		DATA_SMC_TO_EQ(34) = SMC_INPUT(2).10		!Home Flag
		DATA_SMC_TO_EQ(35) = SMC_INPUT(2).11		!Inposition Signal
		DATA_SMC_TO_EQ(36) = SMC_INPUT(2).8			!Busy Signal
		DATA_SMC_TO_EQ(37) = SMC_INPUT(2).9			!Servo On Signal
		DATA_SMC_TO_EQ(38) = SMC_INPUT(2).12 		!AREA
		DATA_SMC_TO_EQ(39) = SMC_INPUT(2).14		!ESTOP
		DATA_SMC_TO_EQ(40) = SMC_READ_PUSH_FORCE(2)		!PUSH FORCE
		DATA_SMC_TO_EQ(41) = SMC_READ_TARGET_POS(2)	!READING TARGET POSITION
		DATA_SMC_TO_EQ(42) = SMC_INFO_FLAG(2).4		!READY

		!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		!EQ TO ACS
		Home_Offset(Main_X)           = DATA_EQ_TO_ACS(0)
		Home_Offset(Polishing_Y)      = DATA_EQ_TO_ACS(1)
		Home_Offset(Main_Z)           = DATA_EQ_TO_ACS(2)
		Home_Offset(Cleaning_T)       = DATA_EQ_TO_ACS(3)
		Home_Offset(Polishing_Theta)  = DATA_EQ_TO_ACS(4)
		Home_Offset(Polishing_Tilt)   = DATA_EQ_TO_ACS(5)
		Home_Offset(Storage_Y)        = DATA_EQ_TO_ACS(6)
		Home_Offset(Cleaning_Y)       = DATA_EQ_TO_ACS(7)

		!Force_Flag                    = DATA_EQ_TO_ACS(31)
		
		!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		!ACS TO EQ
		DATA_ACS_TO_EQ(20) = T_cnt
		DATA_ACS_TO_EQ(21) = X_cnt
		DATA_ACS_TO_EQ(22) = Y_cnt
		
		DATA_ACS_TO_EQ(23) = XSEG_CNT/2 !CNT 
		
		!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		!SICK Data
		EC_PLCIN(0) = SICK_DATA(0).8  !Leak-Polishing
		EC_PLCIN(1) = SICK_DATA(0).9  !Leak-Cleaning Bottom
		EC_PLCIN(2) = SICK_DATA(0).10 !Leak-Cleaning Top
		EC_PLCIN(3) = SICK_DATA(0).11 !Leak-Local Bottom Plate
		EC_PLCIN(4) = SICK_DATA(0).12 !Leak-Bottom Sol Box
		EC_PLCIN(5) = SICK_DATA(0).13 !Leak-Settling
		EC_PLCIN(6) = SICK_DATA(0).14 !Leak-Utility Inlet
		EC_PLCIN(7) = SICK_DATA(0).15 !Leak-Local Floor
		EC_PLCIN(8) = SICK_DATA(0).16 !Accura Gas
		EC_PLCIN(9) = SICK_DATA(0).17 !Accura Temp
		
		EC_PLCIN(10)= SICK_DATA(0).2  !DOOR-1
		EC_PLCIN(11)= SICK_DATA(0).3  !DOOR-2
		
		!EMS -> Valve/Pump Off
		m_nEMS  = EC_IN(6).5<>1 | EC_IN(6).6<>1 | EC_IN(6).7<>1
		m_nLeak = EC_PLCIN(0) | EC_PLCIN(1) | EC_PLCIN(2) | EC_PLCIN(3) | EC_PLCIN(4) | EC_PLCIN(5) | EC_PLCIN(6) | EC_PLCIN(7)
		IF m_nLeak | m_nEMS
			EC_OUT(7).0 = 0
			EC_OUT(7).1 = 0
			EC_OUT(7).2 = 0
			EC_OUT(7).3 = 0
			EC_OUT(7).4 = 0
			
			EC_OUT(7).7 = 0
			
			EC_OUT(8).4 = 0
			EC_OUT(8).5 = 0
			EC_OUT(8).6 = 0
			EC_OUT(8).7 = 0
			
			EC_OUT(9).0 = 0
	
			DATA_ACS_TO_EQ(49) = 1 !To PC
		ELSE 
			DATA_ACS_TO_EQ(49) = 0 !To PC
		END
		
		!MC ON
		EC_OUT(0).0 = 1
    END
END
STOP
ON ^PST(15).#RUN;EXEC "#15X"; RET
